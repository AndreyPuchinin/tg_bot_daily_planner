from io import BytesIO
from datetime import datetime, timedelta
from flask import Flask, request # –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK –î–õ–Ø RENDER
import threading
import logging
import telebot
import requests
import json
import html
import time
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===

# B–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_USER_ID_RAW = os.getenv("ADMIN_USER_ID") #–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
if not WEBHOOK_URL:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∞!")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ADMIN_USER_ID –≤ —Å–ø–∏—Å–æ–∫ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
if ADMIN_USER_ID_RAW:
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
    ADMIN_USER_ID = [uid.strip() for uid in ADMIN_USER_ID_RAW.split(",") if uid.strip()]
else:
    ADMIN_USER_ID = []
    logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω–∞. –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

TIMEZONE_OFFSET = 3  # UTC+3 (–ú–æ—Å–∫–≤–∞)
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –†–∞–±–æ—Ç–∞ —Å –≥–∏—Å—Ç–æ–º —Å –≥–∏—Ç—Ö–∞–±–∞ (–ø–µ—Ä–µ–Ω–æ—Å–∏–º –ë–î —Ç—É–¥–∞)
GIST_ID = os.getenv("GIST_ID")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

# WEB-HOOK
app = Flask(__name__)

# Logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
user_awaiting_json_file = set()
user_awaiting_task_text = {}
user_awaiting_datetime = {}
user_awaiting_feedback = set()
user_awaiting_daytasks_date = set()
user_awaiting_weekbydate_input = set()
user_awaiting_settings_input = {}  # {user_id: "urgent_threshold" –∏–ª–∏ "daily_hour"}
user_in_settings_menu = set()  # –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ –º–µ–Ω—é /settings

CANCEL_ACTION_NAMES = {
    "cancel_task": "/task",
    "cancel_jsonin": "/jsonin",
    "cancel_feedback": "/feedback",
    "cancel_daytasks": "/daytasks",
    "cancel_weekbydate": "/weekbydate",
    "settings_cancel": "/settings",
    "cancel_settings_urgent_threshold": "/settings",
    "cancel_settings_daily_hour": "/settings"
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö callback_data-–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
CANCEL_ACTIONS = set(CANCEL_ACTION_NAMES.keys())

# –¢–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DB_ERROR_MESSAGE = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞!"

def now_msk():
    return datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)

# === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò –û–¢–ú–ï–ù–´ ===
def make_cancel_button(callback_data: str) -> telebot.types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π 'Cancel'."""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("Cancel", callback_data=callback_data))
    return markup

# === –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò ===
def load_data(user_name: str, user_id: int, cmd: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ Gist. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if not GIST_ID or not GITHUB_TOKEN:
        logger.critical("GIST_ID –∏–ª–∏ GITHUB_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return None

    url = f"https://api.github.com/gists/{GIST_ID}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        if resp.status_code == 200:
            gist_data = resp.json()
            for filename, file_info in gist_data["files"].items():
                if filename == "data.json":
                    content = file_info["content"]
                    if not content.strip():
                        return {}
                    try:
                        return json.loads(content)
                    except json.JSONDecodeError as e:
                        notify_admins_about_db_error(user_name, user_id, cmd, f"JSON decode error in Gist: {e}")
                        return None
            # –§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω
            notify_admins_about_db_error(user_name, user_id, cmd, "–§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Gist")
            return None
        else:

            notify_admins_about_db_error(user_name, user_id, cmd, f"GitHub API error: {resp.status_code} {resp.text}")
            return None
    except requests.RequestException as e:
        notify_admins_about_db_error(user_name, user_id, cmd, f"Network error loading Gist: {e}")
        return None
    except Exception as e:
        notify_admins_about_db_error(user_name, user_id, cmd, f"Unexpected error in load_data: {e}")
        return None

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π Gist."""
    if not GIST_ID or not GITHUB_TOKEN:
        logger.error("‚ùåGIST_ID –∏–ª–∏ GITHUB_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    url = f"https://api.github.com/gists/{GIST_ID}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    payload = {
        "files": {
            "data.json": {
                "content": json.dumps(data, ensure_ascii=False, indent=2)
            }
        }
    }
    try:
        resp = requests.patch(url, json=payload, headers=headers, timeout=10)
        if resp.status_code != 200:
            logger.critical(f"‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Gist: {resp.status_code} {resp.text}")
    except Exception as e:
        logger.critical(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Gist: {e}")
        
"""def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    temp_file = DATA_FILE + ".tmp"
    with open(temp_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(temp_file, DATA_FILE)"""

# === –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê ===
def notify_admins_about_new_user(user_name: str, user_id: str, chat_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    message_to_admins = (
        f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ!\n\n"
        f"<b>–ò–º—è: <i>{user_name}</i></b>\n"
        f"<i><b>ID:</b> {user_id}</i>\n"
        f"<i><b>Chat ID:</b> {chat_id}</i>"
    )
    for admin_id in ADMIN_USER_ID:
        try:
            bot.send_message(admin_id, message_to_admins, parse_mode="HTML")
        except Exception as e:
            logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

def notify_admins_about_db_error(user_name: str, user_id: str, command: str, error_details: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ë–î."""
    message_to_admins = (
        f"‚ÄºÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_name} (ID={user_id})</b> –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /{command}, "
        f"–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–∞–∑–æ–π –î–∞–Ω–Ω—ã—Ö!\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ:\n{error_details}"
    )
    logger.error(error_details)
    for admin_id in ADMIN_USER_ID:
        try:
            if user_name != "" and user_id != 0 and command != "":
                bot.send_message(admin_id, message_to_admins, parse_mode="HTML")
                bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–∞–∑–æ–π –î–∞–Ω–Ω—ã—Ö! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º.")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –Ω—É–∂–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –≤ —á–∞—Ç (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ!)
                bot.send_message(user_id, f"‚ùå –†–µ–∂–∏–º –≤–≤–æ–¥–∞ /{command} –æ—Ç–º–µ–Ω—ë–Ω.")
        except Exception as e:
            logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@bot.message_handler(commands=["jsonout"])
def jsonout_handler(message):
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    try:
        data = load_data(user_name, message.chat.id, "jsonout")
        text = ""
        if not data:
            text += "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.\n"
        elif is_data_empty(data):
            text += "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n"

        json_bytes = json.dumps(data, ensure_ascii=False, indent=2).encode("utf-8")

        if str(message.from_user.id) not in ADMIN_USER_ID:
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        text += "üìÅ –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        bot.send_document(
            message.chat.id,
            document=BytesIO(json_bytes),
            visible_file_name="data.json",
            caption=text
        )

    except json.JSONDecodeError as e:
        error_details = f"–û—à–∏–±–∫–∞ –≤ JSON (—Å—Ç—Ä–æ–∫–∞ {e.lineno}, –∫–æ–ª–æ–Ω–∫–∞ {e.colno}): {e.msg}"
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –∏–∑ Gist: {error_details}")
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞: —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n```\n{error_details}\n```",
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –≤ /jsonout: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –ø–æ —Å–º—ã—Å–ª—É (json —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, –Ω–æ –±–µ–∑ –∑–∞–¥–∞—á)
def is_data_empty(data: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ data —Ö–æ—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É —É –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not data:
        return True
    for user_data in data.values():
        if isinstance(user_data, dict) and user_data.get("tasks"):
            # –ï—Å–ª–∏ —É –∫–æ–≥–æ-—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –ø—É—Å—Ç–æ
            return False
    return True

@bot.message_handler(commands=["jsonin"])
def jsonin_handler(message):
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    main_msg = "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–æ—Ç–∞.\n"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ë–î –∏–∑ Gist
    try:
        data = load_data(user_name, message.chat.id, "jsonin")
        if not data:
            main_msg += "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.\n"
        elif is_data_empty(data):
            main_msg += "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ë–î –∫–∞–∫ —Ñ–∞–π–ª, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
        # (–≤–µ–¥—å —Ç–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –∞–π–¥–∏—à–Ω–∏–∫–∏ —é–∑–µ—Ä–æ–≤...)
        json_bytes = json.dumps(data, ensure_ascii=False, indent=2).encode("utf-8")

        if str(message.from_user.id) not in ADMIN_USER_ID:
            try:
                bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            except Exception as e:
                logger.critical(f"‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            return
        
        main_msg += "üìÅ –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
        bot.send_document(
            message.chat.id,
            document=BytesIO(json_bytes),
            visible_file_name="data.json",
            caption=main_msg, 
            reply_markup=make_cancel_button("cancel_jsonin")
        )
    except Exception as e:
        logger.critical(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î –≤ /jsonin: {e}")
        bot.send_message(
            message.chat.id,
            main_msg + f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=make_cancel_button("cancel_jsonin")
        )

    # –í–∞–∂–Ω–æ: –≤—Å–µ–≥–¥–∞ –≤—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    user_awaiting_json_file.add(str(message.from_user.id))

@bot.message_handler(content_types=["document"], func=lambda msg: str(msg.from_user.id) in user_awaiting_json_file)
def handle_json_file(msg):
    user_id = str(msg.from_user.id)
    chat_id = msg.chat.id
    if not msg.document:
        bot.send_message(chat_id, "‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª.", reply_markup=make_cancel_button("cancel_jsonin"))
        return
    file_info = bot.get_file(msg.document.file_id)
    file_name = msg.document.file_name or ""
    if not file_name.lower().endswith(".json"):
        bot.send_message(chat_id, "‚ö†Ô∏è–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json.", reply_markup=make_cancel_button("cancel_jsonin"))
        return
    try:
        downloaded_file = bot.download_file(file_info.file_path)
        json_content = json.loads(downloaded_file.decode("utf-8"))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª –ø–æ —Å–º—ã—Å–ª—É?
        if is_data_empty(json_content):
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî –≤–∞–ª–∏–¥–Ω—ã–π JSON, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.\n"
                "–§–∞–π–ª –Ω–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω—ë–Ω.",
                reply_markup=make_cancel_button("cancel_jsonin")
            )
            return
        save_data(json_content)
        user_awaiting_json_file.discard(user_id)
        bot.send_message(chat_id, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω—ë–Ω!")
    except json.JSONDecodeError as e:
        error_details = f"‚ùå–û—à–∏–±–∫–∞ –≤ JSON (—Å—Ç—Ä–æ–∫–∞ {e.lineno}, –∫–æ–ª–æ–Ω–∫–∞ {e.colno}): {e.msg}"
        logger.critical(f"‚ùåJSON decode error from user {msg.from_user.id}: {error_details}")
        bot.send_message(
            chat_id,
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-—Ñ–∞–π–ª.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n{error_details}",
            reply_markup=make_cancel_button("cancel_jsonin")
        )
    except UnicodeDecodeError as e:
        logger.critical(f"Unicode decode error from user {msg.from_user.id}: {e}")
        bot.send_message(chat_id, "‚ùå–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.", reply_markup=make_cancel_button("cancel_jsonin"))
    except Exception as e:
        logger.critical(f"Unexpected error in handle_json_file: {e}", exc_info=True)
        bot.send_message(chat_id, f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=make_cancel_button("cancel_jsonin"))

# –§–£–ù–ö–¶–ò–Ø –ö–ù–û–ü–ö–ò
@bot.callback_query_handler(func=lambda call: call.data.startswith("settings_"))
def settings_callback_handler(call):
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    action = call.data

    if action == "settings_cancel":
        # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        universal_cancel_handler(call)
        return

    # üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–Ω—é /settings
    if user_id not in user_in_settings_menu:
        bot.answer_callback_query(
            call.id,
            "–†–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /settings —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!",
            show_alert=False
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –î–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    data = load_data(call.from_user.first_name, message.chat.id, "settings")
    if data is None or user_id not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        bot.answer_callback_query(call.id)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
    if action == "settings_urgent_threshold":
        param_name = "urgent_threshold"
        current_val = data.get("settings", {}).get("urgent_threshold_hours", 12)
        prompt = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–≤ —á–∞—Å–∞—Ö).\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_val}\n–î–æ–ø—É—Å—Ç–∏–º–æ: –æ—Ç 1 –¥–æ 168."
    elif action == "settings_daily_hour":
        param_name = "daily_hour"
        current_val = data.get("settings", {}).get("daily_reminder_hour", 6)
        prompt = f"–í–≤–µ–¥–∏—Ç–µ —á–∞—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ –ú–°–ö).\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_val}\n–î–æ–ø—É—Å—Ç–∏–º–æ: –æ—Ç 0 –¥–æ 23."
    else:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è–ù–∞–∂–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_awaiting_settings_input[user_id] = param_name

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∑–Ω–∞—á–µ–Ω–∏—è
    bot.send_message(
        chat_id,
        prompt,
        reply_markup=make_cancel_button(f"cancel_settings_{param_name}")
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    bot.answer_callback_query(call.id)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∂–∏–º /settings (–¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–∞–º–æ–≥–æ –º–µ–Ω—é, –ø–æ–∫–∏–¥–∞–µ–º –º–µ–Ω—é)
    user_in_settings_menu.discard(user_id)  # –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é, —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–¥—Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞

# –§–£–ù–ö–¶–ò–Ø –û–¢–ú–ï–ù–´ –ö–û–ú–ê–ù–î–´
@bot.callback_query_handler(func=lambda call: call.data in CANCEL_ACTIONS)
def universal_cancel_handler(call):
    user_id = str(call.from_user.id)
    action = call.data
    command_name = CANCEL_ACTION_NAMES[action]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
    in_mode = False
    if action == "cancel_task":
        in_mode = (user_id in user_awaiting_task_text) or (user_id in user_awaiting_datetime)
    elif action == "cancel_jsonin":
        in_mode = user_id in user_awaiting_json_file
    elif action == "cancel_feedback":
        in_mode = user_id in user_awaiting_feedback
    elif action == "cancel_daytasks":
        in_mode = user_id in user_awaiting_daytasks_date
    elif action == "cancel_weekbydate":
        in_mode = user_id in user_awaiting_weekbydate_input
    elif action == "settings_cancel":
        in_mode = user_id in user_in_settings_menu
        if in_mode:
            user_in_settings_menu.discard(user_id)
            bot.answer_callback_query(call.id)
        else:
            bot.answer_callback_query(
                call.id,
                "–†–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /settings —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!",
                show_alert=False
            )
    elif action in ("cancel_settings_urgent_threshold", "cancel_settings_daily_hour"):
        in_mode = user_id in user_awaiting_settings_input
            
    if in_mode:
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞
        if action == "cancel_task":
            user_awaiting_task_text.pop(user_id, None)
            user_awaiting_datetime.pop(user_id, None)
        elif action == "cancel_jsonin":
            user_awaiting_json_file.discard(user_id)
        elif action == "cancel_feedback":
            user_awaiting_feedback.discard(user_id)
        elif action == "cancel_daytasks":
            user_awaiting_daytasks_date.discard(user_id)
        elif action == "cancel_weekbydate":
            user_awaiting_weekbydate_input.discard(user_id)
        elif action == "settings_cancel":
            user_in_settings_menu.discard(user_id)
        elif action in ("cancel_settings_urgent_threshold", "cancel_settings_daily_hour"):
            user_awaiting_settings_input.pop(user_id, None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ!)
        bot.send_message(call.message.chat.id, f"‚ùå –†–µ–∂–∏–º –≤–≤–æ–¥–∞ {command_name} –æ—Ç–º–µ–Ω—ë–Ω.")
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏")
        bot.answer_callback_query(call.id)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.answer_callback_query(
            call.id,
            f"–†–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã {command_name} —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!",
            show_alert=False  # –º–æ–∂–Ω–æ True, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        )

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
@bot.message_handler(func=lambda msg: str(msg.from_user.id) in user_awaiting_settings_input)
def settings_value_input(msg):
    user_id = str(msg.from_user.id)
    chat_id = msg.chat.id
    param = user_awaiting_settings_input[user_id]

    try:
        value = int(msg.text.strip())
    except ValueError:
        bot.send_message(
            chat_id,
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=make_cancel_button(f"cancel_settings_{param}")
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_data(msg.from_user.first_name, msg.chat.id, "settings")
    if data is None or user_id not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        user_awaiting_settings_input.pop(user_id, None)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    valid = False
    if param == "urgent_threshold":
        if 1 <= value <= 168:
            data[user_id]["settings"]["urgent_threshold_hours"] = value
            valid = True
            success_msg = f"‚úÖ –ü–æ—Ä–æ–≥ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value} —á–∞—Å–æ–≤."
        else:
            bot.send_message(
                chat_id,
                "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 168.",
                reply_markup=make_cancel_button("cancel_settings_urgent_threshold")
            )
    elif param == "daily_hour":
        if 0 <= value <= 23:
            data[user_id]["settings"]["daily_reminder_hour"] = value
            valid = True
            success_msg = f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {value}:00 –ø–æ –ú–°–ö."
        else:
            bot.send_message(
                chat_id,
                "‚ùå –ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 23.",
                reply_markup=make_cancel_button("cancel_settings_daily_hour")
            )

    if valid:
        save_data(data)
        bot.send_message(chat_id, success_msg)
        user_awaiting_settings_input.pop(user_id, None)

def send_long_message(bot, chat_id, text, parse_mode=None):
    if not text.strip():
        return
    max_len = 4000
    for i in range(0, len(text), max_len):
        bot.send_message(chat_id, text[i:i + max_len], parse_mode=parse_mode)

def generate_example_datetime():
    now = now_msk()
    tomorrow = now.date() + timedelta(days=1)
    example_dt = datetime.combine(tomorrow, datetime.min.time()).replace(
        hour=now.hour, minute=now.minute
    )
    return example_dt.strftime("%Y-%m-%d %H:%M")

def get_tasks_on_date(data: dict, user_id: str, target_date: datetime.date) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    tasks_on_date = []
    if user_id not in data:
        return tasks_on_date
    for task in data[user_id]["tasks"]:
        if task.get("status") == "completed":
            continue
        try:
            task_dt = datetime.fromisoformat(task["datetime"])
            if task_dt.date() == target_date:
                formatted_time = task_dt.strftime("%H:%M")
                tasks_on_date.append(f"‚Ä¢ {task['text']} ({formatted_time})")
        except (ValueError, KeyError):
            continue
    return tasks_on_date

def stop_command_in_group(chat_id, user_name):
    bot.send_message(chat_id, f"‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, <b>{user_name}</b>, –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö!", parse_mode="HTML")

def generate_today_date():
    now = now_msk()
    today = now.date()
    example_dt = datetime.combine(today, datetime.min.time()).replace(
        hour=now.hour, minute=now.minute
    )
    return example_dt.strftime("%Y-%m-%d %H:%M")

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
@bot.message_handler(commands=["start"])
def start_handler(message):
    user_id = str(message.from_user.id)
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return

    for attempt in range(3):  # –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        # 1. –ß–∏—Ç–∞–µ–º –°–í–ï–ñ–£–Æ –ë–î –∏–∑ Gist
        data = load_data(user_name, message.chat.id, "start")

        # bot.send_message(message.chat.id, "üîç –¢–µ–∫—É—â–∞—è –ë–î:\n" + json.dumps(data, ensure_ascii=False, indent=2))

        # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if user_id in data:
            bot.send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! –ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å.")
            return

        # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data[user_id] = {
            "user_name": user_name,
            "chat_id": str(message.chat.id),
            "tasks": [],
            "settings": {
                "urgent_threshold_hours": 12,
                "daily_reminder_hour": 6
            }
        }

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–Æ –ë–î (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        save_data(data)

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        data_check = load_data(user_name, message.chat.id, "start")
        if user_id in data_check:
            info_handler(message)
            notify_admins_about_new_user(user_name, user_id, str(message.chat.id))
            return

        # –ï—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª)
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –ë–î")

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
    bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

@bot.message_handler(commands=["info"])
def info_handler(message):
    user_id = str(message.from_user.id)
    if message.chat.type != "private":
        command_in_group(user_name)
        return
    is_admin = (user_id in ADMIN_USER_ID)

    text = "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ¬´–ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫¬ª</b>\n\n"
    text += "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤, –¥–ª—è –Ω–∏—Ö - —Å–≤–æ–∏ –¥–æ–ø.-–∫–æ–º–∞–Ω–¥—ã):</b>\n"
    text += "<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∞–¥–º–∏–Ω–∞–º</i>\n\n"
    text += "‚Ä¢ /start ‚Äî <i>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</i>\n"
    text += "‚Ä¢ /info ‚Äî <i>–ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É</i>\n"
    text += "‚Ä¢ /feedback ‚Äî <i>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º</i>\n"
    text += "‚Ä¢ /task ‚Äî <i>–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</i>\n"
    text += "‚Ä¢ <i>–ó–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</i>\n"
    text += "  ‚Äì <i>–∑–∞ –¥–µ–Ω—å –≤ 13:00 –ø–æ –ú–°–ö,</i>\n"
    text += "  ‚Äì <i>–∏–ª–∏ –∑–∞ 12 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞.</i>\n"
    text += "  ‚Äì <i>–ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å.</i>\n"
    text += "‚Ä¢ /settings ‚Äî <i>–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</i>\n"
    text += "‚Ä¢ /daytasks ‚Äî <i>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É</i>\n"
    text += "‚Ä¢ /today ‚Äî <i>–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</i>\n"
    text += "‚Ä¢ /tomorrow ‚Äî <i>–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</i>\n"
    text += "‚Ä¢ /week ‚Äî <i>–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</i>\n"
    text += "‚Ä¢ /weekbydate ‚Äî <i>–ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –ø–æ –¥–∞—Ç–µ</i>\n\n"
    text += "<i><b>P.s.</b>: –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –ø—Ä–∏—Ç–æ—Ä–º–∞–∂–∏–≤–∞—Ç—å (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ~2 –º–∏–Ω—É—Ç).</i>\n"
    text += "<i>‚Ä¢ –¢–∞–∫–∂–µ –∏–Ω–æ–≥–¥–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ë–∞–∑–æ–π –î–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.</i>\n"
    text += "<i>‚Ä¢ –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∞–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å. –ü—Ä–∏ –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö, –≤—ã–∑—ã–≤–∞—é—â–∏—Ö –æ—à–∏–±–∫—É, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</i>\n\n"

    if is_admin:
        text += "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        text += "‚Ä¢ /jsonout ‚Äî <i>–ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—éa –ë–î –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞</i>\n"
        text += "‚Ä¢ /jsonin ‚Äî <i>–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –ë–î –∏–∑ —Ñ–∞–π–ª–∞</i>\n"
        text += "<i>‚ö†Ô∏è –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î —Ç—Ä–µ–±—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON-—Ñ–æ—Ä–º–∞—Ç–∞.</i>\n"

    bot.send_message(message.chat.id, text, parse_mode="HTML")

@bot.message_handler(commands=["feedback"])
def feedback_handler(message):
    user_id = str(message.from_user.id)
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    bot.send_message(
        message.chat.id,
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∂–∞–ª–æ–±–∞, –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å ‚Äî —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å –≤–Ω–µ Telegram –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —á–∞—Å—ã –¥–ª—è —Å–≤—è–∑–∏ ‚Äî —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ.",
        reply_markup=make_cancel_button("cancel_feedback")
    )
    user_awaiting_feedback.add(user_id)

@bot.message_handler(func=lambda msg: str(msg.from_user.id) in user_awaiting_feedback)
def handle_feedback_message(msg):
    user_id = str(msg.from_user.id)
    user_name = msg.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    feedback_text = msg.text.strip()

    if not feedback_text:
        bot.send_message(
            msg.chat.id,
            "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.",
            reply_markup=make_cancel_button("cancel_feedback")
            )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_message = (
        f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID={user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∏–¥–±–µ–∫:\n\n"
        f"{feedback_text}"
    )

    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    success_count = 0
    for admin_id in ADMIN_USER_ID:
        try:
            bot.send_message(admin_id, admin_message)
            success_count += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if success_count > 0:
        bot.send_message(msg.chat.id, "–°–ø–∞—Å–∏–±–æ. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º –±–æ—Ç–∞.")
    else:
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    user_awaiting_feedback.discard(user_id)

@bot.message_handler(commands=["settings"])
def settings_handler(message):
    user_id = str(message.from_user.id)
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return

    user_in_settings_menu.add(user_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    data = load_data(message.from_user.first_name, message.chat.id, "settings")
    if data is None or user_id not in data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º
    user_in_settings_menu.add(user_id)

    # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚è≥ –ü–æ—Ä–æ–≥ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (—á–∞—Å—ã)", callback_data="settings_urgent_threshold")
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üïí –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–≤—Ç–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–∞—Å)", callback_data="settings_daily_hour")
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings_cancel")
    )

    bot.send_message(
        message.chat.id,
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=markup
    )

@bot.message_handler(commands=["daytasks"])
def daytasks_handler(message):
    user_id = str(message.from_user.id)
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    example = now_msk().strftime("%Y-%m-%d")  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    bot.send_message(
        message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î\n"
        f"–ü—Ä–∏–º–µ—Ä: {example}",
        reply_markup=make_cancel_button("cancel_daytasks")
    )
    user_awaiting_daytasks_date.add(user_id)

@bot.message_handler(func=lambda msg: str(msg.from_user.id) in user_awaiting_daytasks_date)
def handle_daytasks_date_input(msg):
    user_id = str(msg.from_user.id)
    user_name = str(msg.from_user.first_name)
    chat_id = msg.chat.id
    date_str = msg.text.strip()

    # –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ä–∞–∑—É
    user_awaiting_daytasks_date.discard(user_id)

    try:
        target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î\n"
        text += generate_today_date()
        bot.send_message(
            chat_id,
            text,
            reply_markup=make_cancel_button("cancel_daytasks")
        )
        user_awaiting_daytasks_date.add(user_id)  # –≤–µ—Ä–Ω—É—Ç—å –≤ —Ä–µ–∂–∏–º
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        data = load_data(user_name, chat_id, "daytasks")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î –≤ /daytasks: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user_id not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return

    # –ò—â–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    tasks_on_date = []
    for task in data[user_id]["tasks"]:
        if task.get("status") == "completed":
            continue
        try:
            task_dt = datetime.fromisoformat(task["datetime"])
            if task_dt.date() == target_date:
                formatted_time = task_dt.strftime("%H:%M")
                tasks_on_date.append(f"‚Ä¢ {task['text']} ({formatted_time})")
        except (ValueError, KeyError):
            continue

    if not tasks_on_date:
        bot.send_message(chat_id, f"üìÖ –ù–∞ {date_str} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        header = f"üìã –ó–∞–¥–∞—á–∏ –Ω–∞ {date_str}:\n\n"
        full_message = header + "\n\n".join(tasks_on_date)
        send_long_message(bot, chat_id, full_message)

@bot.message_handler(commands=["today"])
def today_handler(message):
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return

    user_id = str(message.from_user.id)
    try:
        data = load_data(message.from_user.first_name, message.chat.id, "today")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î –≤ /today: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user_id not in data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return

    today = now_msk().date()
    tasks = get_tasks_on_date(data, user_id, today)

    if not tasks:
        bot.send_message(message.chat.id, f"üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}) –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        header = f"üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):\n\n"
        full_message = header + "\n\n".join(tasks)
        send_long_message(bot, message.chat.id, full_message)

@bot.message_handler(commands=["tomorrow"])
def tomorrow_handler(message):
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return

    # logger.debug("1")

    user_id = str(message.from_user.id)
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    try:
        # logger.debug("2")
        data = load_data(user_name, message.chat.id, "tomorrow")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î –≤ /tomorrow: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user_id not in data:
        # logger.debug("3")
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return

    # logger.debug("4")
    tomorrow = (now_msk().date() + timedelta(days=1))
    tasks = get_tasks_on_date(data, user_id, tomorrow)

    # logger.debug("5")

    if not tasks:
        # logger.debug("6")
        bot.send_message(
            message.chat.id,
            f"üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}) –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
        )
    else:
        # logger.debug("7")
        header = f"üìã –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}):\n"
        full_message = header + "\n" + "\n".join(tasks)
        send_long_message(bot, message.chat.id, full_message)

@bot.message_handler(commands=["week"])
def week_handler(message):
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return

    user_id = str(message.from_user.id)
    try:
        data = load_data(message.from_user.first_name, message.chat.id, "week")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î –≤ /week: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user_id not in data:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return

    now = now_msk()
    today = now.date()
    # –í Python: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 6
    days_until_sunday = 6 - today.weekday()  # —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
    week_days = [today + timedelta(days=i) for i in range(days_until_sunday + 1)]

    # –°–ª–æ–≤–∞—Ä—å: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ ‚Üí —Ä—É—Å—Å–∫–∞—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
    weekdays_ru = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]

    lines = []
    for i, day in enumerate(week_days):
        weekday_abbr = weekdays_ru[day.weekday()] 
        date_str = day.strftime("%d.%m.%Y")
        tasks = get_tasks_on_date(data, user_id, day)

        lines.append(f"<b>{weekday_abbr} {date_str}</b>")
        if tasks:
            lines.append("\n".join(tasks))
        else:
            lines.append("–ù–µ—Ç –∑–∞–¥–∞—á")
        lines.append("")  # –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è

    full_message = "\n".join(lines).strip()
    if not full_message:
        full_message = "–ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç."
        send_long_message(bot, message.chat.id, full_message)
        return

    send_long_message(bot, message.chat.id, full_message, parse_mode="HTML")

@bot.message_handler(commands=["weekbydate"])
def weekbydate_handler(message):
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    user_id = str(message.from_user.id)
    # –ü—Ä–∏–º–µ—Ä –¥–∞—Ç—ã ‚Äî —Å–µ–≥–æ–¥–Ω—è + 7 –¥–Ω–µ–π
    example_date = (now_msk().date() + timedelta(days=7)).strftime("%Y-%m-%d")
    bot.send_message(
        message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î\n"
        f"–ü—Ä–∏–º–µ—Ä: {example_date}",
        reply_markup=make_cancel_button("cancel_weekbydate")
    )
    user_awaiting_weekbydate_input.add(user_id)


@bot.message_handler(func=lambda msg: str(msg.from_user.id) in user_awaiting_weekbydate_input)
def handle_weekbydate_input(msg):
    user_id = str(msg.from_user.id)
    chat_id = msg.chat.id
    user_name = msg.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    date_str = msg.text.strip()

    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ä–∞–∑—É
    user_awaiting_weekbydate_input.discard(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        target_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–æ–¥, —Å –¥–∞—Ç–æ–π +7 –¥–Ω–µ–π
        example_date = (now_msk().date() + timedelta(days=7)).strftime("%Y-%m-%d")
        bot.send_message(
            chat_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î\n"
            f"–ü—Ä–∏–º–µ—Ä: {example_date}",
            reply_markup=make_cancel_button("cancel_weekbydate")
        )
        user_awaiting_weekbydate_input.add(user_id)  # –≤–µ—Ä–Ω—É—Ç—å –≤ —Ä–µ–∂–∏–º
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º user_id, –∞ –Ω–µ chat_id!
    try:
        data = load_data(user_name, chat_id, "weekbydate")
        if data is None:
            bot.send_message(chat_id, USER_DB_ERROR_MESSAGE)
            return
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î –≤ /weekbydate: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user_id not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–≤–µ–¥—ë–Ω–Ω–∞—è –¥–∞—Ç–∞
    monday = target_date - timedelta(days=target_date.weekday())
    week_days = [monday + timedelta(days=i) for i in range(7)]

    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏
    weekdays_ru = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
    lines = []
    has_any_task = False

    for day in week_days:
        tasks = []
        for task in data[user_id].get("tasks", []):
            if task.get("status") == "completed":
                continue
            try:
                task_dt = datetime.fromisoformat(task["datetime"])
                if task_dt.date() == day:
                    safe_text = html.escape(task['text'])
                    tasks.append(f"‚Ä¢ {safe_text} ({task_dt.strftime('%H:%M')})")
                    has_any_task = True
            except (ValueError, KeyError):
                continue
        weekday_abbr = weekdays_ru[day.weekday()]
        date_str_fmt = day.strftime("%d.%m.%Y")
        lines.append(f"<b>{weekday_abbr} {date_str_fmt}</b>")
        lines.append("\n".join(tasks) if tasks else "‚Ä¢ –ù–µ—Ç –∑–∞–¥–∞—á")
        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –¥–Ω—è–º–∏

    if not has_any_task:
        bot.send_message(chat_id, "–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.")
    else:
        full_message = "\n".join(lines).strip()
        send_long_message(bot, chat_id, full_message, parse_mode="HTML")

@bot.message_handler(commands=["task"])
def task_handler(message):
    user_id = str(message.from_user.id)
    chat_id = message.chat.id
    if message.chat.type != "private":
        stop_command_in_group(message.chat.id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data = load_data(user_name, chat_id, "task")
    if data == None:
        return
    text = message.text[6:].strip()
    if not text:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ, –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã):",
            reply_markup=make_cancel_button("cancel_task")
        )
        user_awaiting_task_text[user_id] = True
    else:
        user_awaiting_datetime[user_id] = text
        example = (now_msk() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
        bot.send_message(
            message.chat.id,
            f"–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä:\n{example}\n"
            f"–ò–ª–∏ –Ω–∞–∂–º–∏ Cancel –Ω–∏–∂–µ.",
            reply_markup=make_cancel_button("cancel_task")
        )

@bot.message_handler(func=lambda msg: str(msg.from_user.id) in user_awaiting_task_text)
def task_text_input(msg):
    user_id = str(msg.from_user.id)
    chat_id = msg.chat.id
    user_name = msg.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data = load_data(user_name, chat_id, "task")
    if data == None:
        return
    user_id = str(msg.from_user.id)
    text = msg.text.strip()
    if not text:
        bot.send_message(msg.chat.id, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    user_awaiting_datetime[user_id] = text
    del user_awaiting_task_text[user_id]
    example = (now_msk() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
    bot.send_message(
        msg.chat.id,
        f"–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
        f"–ü—Ä–∏–º–µ—Ä:\n{example}\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏ inline-–∫–Ω–æ–ø–∫—É Cancel –Ω–∏–∂–µ.",
        reply_markup=make_cancel_button("cancel_task")
    )

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_awaiting_datetime)
def datetime_input_handler(message):
    user_id = str(message.from_user.id)
    chat_id = message.chat.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data = load_data(user_name, chat_id, "task")
    if data == None:
        return
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    datetime_str = message.text.strip()
    try:
        task_datetime = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
    except ValueError:
        example = generate_example_datetime()
        bot.send_message(
            chat_id,
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä:\n{example}",
            reply_markup=make_cancel_button("cancel_task")
        )
        return
    text = user_awaiting_datetime[user_id]
    data = load_data(user_name, chat_id, "task")
    if user_id not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start")
        return
    new_task = {
        "text": text,
        "datetime": task_datetime.isoformat(),
        "status": "waiting",
        "reminded": False,
        "created_at": now_msk().isoformat()
    }
    data[user_id]["tasks"].append(new_task)
    save_data(data)
    del user_awaiting_datetime[user_id]
    bot.send_message(
        chat_id,
        f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"{text}\n"
        f"üìÖ {task_datetime.strftime('%d.%m.%Y –≤ %H:%M')}"
    )

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
def check_and_send_reminders(bot, user_id, chat_id, data):
    user_settings = data[user_id].get("settings", {})
    urgent_threshold = user_settings.get("urgent_threshold_hours", 12)
    daily_hour = user_settings.get("daily_reminder_hour", 6)
    now = now_msk()
    tasks_to_remind = []
    for task in data[user_id]["tasks"]:
        # task.get –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é == True. –ü–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å False-–æ—Ç–≤–µ—Ç –≤ —É—Å–ª–æ–≤–∏–µ!!!
        if (task.get("status") != "waiting" and task.get("status") != True) or task.get("reminded", False):
            # logger.debug(f"1; Task: {task}")
            continue
        try:
            # logger.debug("2")
            task_time = datetime.fromisoformat(task["datetime"])
        except Exception as e:
            # logger.debug(f"3; Reminder inner error: {e}")
            continue
        # logger.debug(f"4; Task: {task}")
        if (task_time.date() == (now.date() + timedelta(days=1))) and (now.hour == daily_hour):
            # logger.debug(f"5; Task time: {task_time.date()}")
            tasks_to_remind.append(task)
        elif (task_time - now).total_seconds() <= urgent_threshold * 3600  and task.get("status") != "overdue":
            # logger.debug(f"6; Task: {task}")
            tasks_to_remind.append(task)
    if not tasks_to_remind:
        return
    lines = []
    for task in tasks_to_remind:
        dt_str = datetime.fromisoformat(task["datetime"]).strftime('%d.%m.%Y –≤ %H:%M')
        lines.append(f"üîî {task['text']}\nüìÖ {dt_str}")
        task["reminded"] = True

    # –°–æ–µ–¥–∏–Ω—è–µ–º –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –î–í–ï –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ)
    tasks_block = "\n\n".join(lines)

    # –ê —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –û–î–ù–û–ô –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    full_message = "‚Äº–ù–∞–ø–æ–º–∏–Ω–∞—é!\n\n" + tasks_block

    save_data(data)
    send_long_message(bot, chat_id, full_message)

def reminder_daemon():
    while True:
        try:
            data = load_data("", 0, "")
            for user_id, user_data in data.items():
                # logger.error("I'm in reminder_daemon()!")
                check_and_send_reminders(bot, user_id, user_id, data)
        except Exception as e:
            lines.append(f"Reminder error: {e}")
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

@app.route('/' + TELEGRAM_BOT_TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Invalid content type', 403

@app.route('/')
def index():
    return 'Bot is running.'

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    reminder_thread = threading.Thread(target=reminder_daemon, daemon=True)
    reminder_thread.start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL + '/' + TELEGRAM_BOT_TOKEN)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 5000))
    app.run(host="0.0.0.0", port=port)
