from io import BytesIO
from datetime import datetime, timedelta
import threading
import telebot
import json
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = "8396602686:AAFfOqaDehOGf7Y3iom_j6VNxEGEmyOxIgU"
DATA_FILE = "data.json"
TIMEZONE_OFFSET = 3  # UTC+3 (–ú–æ—Å–∫–≤–∞)
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
ADMIN_USER_ID = "1287372767" #–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_awaiting_json_file = set()
user_awaiting_task_text = {}
user_awaiting_datetime = {}

def now_msk():
    return datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)

# === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò –û–¢–ú–ï–ù–´ ===
def make_cancel_button(callback_data: str = "cancel_task") -> telebot.types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π 'Cancel'."""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("Cancel", callback_data=callback_data))
    return markup

# === –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò ===
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    temp_file = DATA_FILE + ".tmp"
    with open(temp_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(temp_file, DATA_FILE)

# === –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê ===
@bot.message_handler(commands=["jsonout"])
def jsonout_handler(message):
    if str(message.from_user.id) != ADMIN_USER_ID:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if not os.path.exists(DATA_FILE):
        bot.send_message(message.chat.id, "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        with open(DATA_FILE, "rb") as f:
            bot.send_document(
                message.chat.id,
                document=BytesIO(f.read()),
                visible_file_name="data.json",
                caption="üìÅ –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
            )
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

@bot.message_handler(commands=["jsonin"])
def jsonin_handler(message):
    if str(message.from_user.id) != ADMIN_USER_ID:
        try:
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return

    user_awaiting_json_file.add(str(message.from_user.id))
    try:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–æ—Ç–∞.",
            reply_markup=make_cancel_button("cancel_json")
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ /jsonin: {e}")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback —á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å

@bot.message_handler(content_types=["document"], func=lambda msg: str(msg.from_user.id) in user_awaiting_json_file)
def handle_json_file(msg):
    user_id = str(msg.from_user.id)
    chat_id = msg.chat.id
    if not msg.document:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª.", reply_markup=make_cancel_button("cancel_json"))
        return
    file_info = bot.get_file(msg.document.file_id)
    file_name = msg.document.file_name or ""
    if not file_name.lower().endswith(".json"):
        bot.send_message(chat_id, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json.", reply_markup=make_cancel_button("cancel_json"))
        return
    try:
        downloaded_file = bot.download_file(file_info.file_path)
        json_content = json.loads(downloaded_file.decode("utf-8"))
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(json_content, f, ensure_ascii=False, indent=2)
        user_awaiting_json_file.discard(user_id)
        bot.send_message(chat_id, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω—ë–Ω!")
    except json.JSONDecodeError:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON.", reply_markup=make_cancel_button("cancel_json"))
    except UnicodeDecodeError:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.", reply_markup=make_cancel_button("cancel_json"))
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=make_cancel_button("cancel_json"))

@bot.callback_query_handler(func=lambda call: call.data == "cancel_json")
def cancel_json_upload(call):
    user_id = str(call.from_user.id)
    user_awaiting_json_file.discard(user_id)
    bot.edit_message_text(
        "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        call.message.chat.id,
        call.message.message_id
    )

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def send_long_message(bot, chat_id, text):
    if not text.strip():
        return
    max_len = 4000
    for i in range(0, len(text), max_len):
        bot.send_message(chat_id, text[i:i + max_len])

def generate_example_datetime():
    now = now_msk()
    tomorrow = now.date() + timedelta(days=1)
    example_dt = datetime.combine(tomorrow, datetime.min.time()).replace(
        hour=now.hour, minute=now.minute
    )
    return example_dt.strftime("%Y-%m-%d %H:%M")

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
@bot.message_handler(commands=["start"])
def start_handler(message):
    user_id = str(message.from_user.id)
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data = load_data()
    if user_id not in data:
        data[user_id] = {
            "user_name": user_name,
            "chat_id": str(message.chat.id),
            "tasks": []
        }
        save_data(data)
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n"
            "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ –≤ Telegram.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/task ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        )
    else:
        bot.send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! –ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å.")

@bot.message_handler(commands=["task"])
def task_handler(message):
    user_id = str(message.from_user.id)
    text = message.text[6:].strip()
    if not text:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ, –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã):",
            reply_markup=make_cancel_button("cancel_task")
        )
        user_awaiting_task_text[user_id] = True
    else:
        user_awaiting_datetime[user_id] = text
        example = (now_msk() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
        bot.send_message(
            message.chat.id,
            f"–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä:\n{example}\n"
            f"–ò–ª–∏ –Ω–∞–∂–º–∏ Cancel –Ω–∏–∂–µ.",
            reply_markup=make_cancel_button("cancel_task")
        )

@bot.message_handler(func=lambda msg: str(msg.from_user.id) in user_awaiting_task_text)
def task_text_input(msg):
    user_id = str(msg.from_user.id)
    text = msg.text.strip()
    if not text:
        bot.send_message(msg.chat.id, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    user_awaiting_datetime[user_id] = text
    del user_awaiting_task_text[user_id]
    example = (now_msk() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
    bot.send_message(
        msg.chat.id,
        f"–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
        f"–ü—Ä–∏–º–µ—Ä:\n{example}\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏ inline-–∫–Ω–æ–ø–∫—É Cancel –Ω–∏–∂–µ.",
        reply_markup=make_cancel_button("cancel_task")
    )

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_awaiting_datetime)
def datetime_input_handler(message):
    user_id = str(message.from_user.id)
    chat_id = message.chat.id
    datetime_str = message.text.strip()
    try:
        task_datetime = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
    except ValueError:
        example = generate_example_datetime()
        bot.send_message(
            chat_id,
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä:\n{example}",
            reply_markup=make_cancel_button("cancel_task")
        )
        return
    text = user_awaiting_datetime[user_id]
    data = load_data()
    if user_id not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start")
        return
    new_task = {
        "text": text,
        "datetime": task_datetime.isoformat(),
        "status": "waiting",
        "reminded": False,
        "created_at": now_msk().isoformat()
    }
    data[user_id]["tasks"].append(new_task)
    save_data(data)
    del user_awaiting_datetime[user_id]
    bot.send_message(
        chat_id,
        f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"{text}\n"
        f"üìÖ {task_datetime.strftime('%d.%m.%Y –≤ %H:%M')}"
    )

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
def check_and_send_reminders(bot, user_id, chat_id, data):
    now = now_msk()
    tasks_to_remind = []
    for task in data[user_id]["tasks"]:
        if task.get("status") != "waiting" or task.get("reminded", True):
            continue
        try:
            task_time = datetime.fromisoformat(task["datetime"])
        except:
            continue
        if (task_time.date() == (now.date() + timedelta(days=1))) and now.hour == 13:
            tasks_to_remind.append(task)
        elif (task_time - now).total_seconds() <= 12 * 3600:
            tasks_to_remind.append(task)
    if not tasks_to_remind:
        return
    lines = []
    for task in tasks_to_remind:
        dt_str = datetime.fromisoformat(task["datetime"]).strftime('%d.%m.%Y –≤ %H:%M')
        lines.append(f"üîî {task['text']}\nüìÖ {dt_str}")
        task["reminded"] = True
    save_data(data)
    send_long_message(bot, chat_id, "\n".join(lines))

def reminder_daemon():
    while True:
        try:
            data = load_data()
            for user_id, user_data in data.items():
                check_and_send_reminders(bot, user_id, user_id, data)
        except Exception as e:
            print(f"Reminder error: {e}")
        # time.sleep(600)  # 10 –º–∏–Ω—É—Ç ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

"""# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ú–ï–ù–´ ===
@bot.callback_query_handler(func=lambda call: call.data == "cancel_task")
def cancel_task(call):
    user_id = str(call.from_user.id)
    user_awaiting_task_text.pop(user_id, None)
    user_awaiting_datetime.pop(user_id, None)
    bot.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)"""

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    reminder_thread = threading.Thread(target=reminder_daemon, daemon=True)
    reminder_thread.start()
    bot.polling()
