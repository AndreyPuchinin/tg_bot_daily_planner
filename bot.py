from io import BytesIO
from telebot.apihelper import ApiTelegramException
from datetime import datetime, timedelta
import threading
import telebot
import json
# import time
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = "8396602686:AAFfOqaDehOGf7Y3iom_j6VNxEGEmyOxIgU"
DATA_FILE = "data.json"
TIMEZONE_OFFSET = 3  # UTC+3 (–ú–æ—Å–∫–≤–∞)

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

ADMIN_USER_ID = "1287372767"

user_states = {}  # user_id -> dict

TIMEZONE_OFFSET = 3

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
user_states = {}  # user_id -> {"mode": "task_text", "command": "/task", "original_message_id": 123}
user_awaiting_json_file = set()

def now_msk():
    return datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    temp_file = DATA_FILE + ".tmp"
    with open(temp_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(temp_file, DATA_FILE)  # –∞—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞
    
# Inline-–∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è /jsonin & /jsonout
def make_cancel_inline():
    return telebot.types.InlineKeyboardMarkup().add(
        telebot.types.InlineKeyboardButton("Cancel", callback_data="cancel_json")
    )

def cancel_operation(call, mode_name: str, command_name: str):
    user_id = str(call.from_user.id)
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    current = user_states.get(user_id)
    if current and current["mode"] == mode_name:
        del user_states[user_id]
        try:
            bot.edit_message_text(
                f"‚ùå –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã {command_name}.",
                chat_id, message_id
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ —Ç.–¥.)
    else:
        # –£–∂–µ –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ –ª–æ–≤–∏–º –æ—à–∏–±–∫—É
        try:
            bot.answer_callback_query(
                call.id,
                f"–†–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã {command_name} —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω.",
                show_alert=False
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "query is too old" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                pass
            else:
                raise  # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel:"))
def universal_cancel(call):
    _, mode, command = call.data.split(":", 2)
    cancel_operation(call, mode, command)
    
# –ö–æ–º–∞–Ω–¥–∞ /jsonout ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
@bot.message_handler(commands=["jsonout"])
def jsonout_handler(message):
    if str(message.from_user.id) != ADMIN_USER_ID:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if not os.path.exists(DATA_FILE):
        bot.send_message(message.chat.id, "–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(DATA_FILE, "rb") as f:
            bot.send_document(
                message.chat.id,
                document=BytesIO(f.read()),
                visible_file_name="data.json",
                caption="üìÅ –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
            )
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /jsonin ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
@bot.message_handler(commands=["jsonin"])
def jsonin_handler(message):
    if str(message.from_user.id) != ADMIN_USER_ID:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    user_awaiting_json_file.add(str(message.from_user.id))
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–æ—Ç–∞.",
        reply_markup=make_cancel_inline()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ñ–∞–π–ª–∞)
@bot.message_handler(content_types=["document"], func=lambda msg: str(msg.from_user.id) in user_awaiting_json_file)
def handle_json_file(msg):
    user_id = str(msg.from_user.id)
    chat_id = msg.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª
    if not msg.document:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª.", reply_markup=make_cancel_inline())
        return

    file_info = bot.get_file(msg.document.file_id)
    file_name = msg.document.file_name or ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if not file_name.lower().endswith(".json"):
        bot.send_message(chat_id, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json.", reply_markup=make_cancel_inline())
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
        json_content = json.loads(downloaded_file.decode("utf-8"))
        # –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(json_content, f, ensure_ascii=False, indent=2)

        user_awaiting_json_file.discard(user_id)
        bot.send_message(chat_id, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω—ë–Ω!")

    except json.JSONDecodeError:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON.", reply_markup=make_cancel_inline())
    except UnicodeDecodeError:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.", reply_markup=make_cancel_inline())
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=make_cancel_inline())

def send_long_message(bot, chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤."""
    if not text.strip():
        return
    max_len = 4000
    for i in range(0, len(text), max_len):
        bot.send_message(chat_id, text[i:i + max_len])

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: –∑–∞–≤—Ç—Ä–∞ + —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö)
def generate_example_datetime():
    now = now_msk()
    tomorrow = now.date() + timedelta(days=1)
    example_dt = datetime.combine(tomorrow, datetime.min.time()).replace(
        hour=now.hour, minute=now.minute
    )
    return example_dt.strftime("%Y-%m-%d %H:%M")

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_handler(message):
    user_id = str(message.from_user.id)
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data = load_data()

    if user_id not in data:
        data[user_id] = {
                            "user_name": user_name,
                            "chat_id": str(message.chat.id),  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
                            "tasks": []
                        }
        save_data(data)
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n"
            "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ –≤ Telegram.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/task ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
            "/today ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        )
    else:
        bot.send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! –ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å.")

# –ö–æ–º–∞–Ω–¥–∞ /task
@bot.message_handler(commands=["task"])
def task_handler(message):
    user_id = str(message.from_user.id)
    text = message.text[6:].strip()

    if not text:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ, –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã):",
            reply_markup=make_cancel_inline("task_text", "/task")
        )
        user_states[user_id] = {"mode": "task_text", "command": "/task"}
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–µ
        user_states[user_id] = text
        example = (now_msk() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
        bot.send_message(
            message.chat.id,
            f"–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä:\n{example}\n\n"
            f"–ò–ª–∏ –Ω–∞–∂–º–∏ Cancel –Ω–∏–∂–µ.",
            reply_markup=make_cancel_inline("task_text", "/task")
        )
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
@bot.message_handler(func=lambda msg: str(msg.from_user.id) in user_states)
def task_text_input(msg):
    user_id = str(msg.from_user.id)
    text = msg.text.strip()

    if not text:
        bot.send_message(msg.chat.id, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –¥–∞—Ç—ã
    user_states[user_id] = text
    del user_states[user_id]  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞

    example = (now_msk() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
    bot.send_message(
        msg.chat.id,
        f"–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
        f"–ü—Ä–∏–º–µ—Ä:\n{example}\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏ inline-–∫–Ω–æ–ø–∫—É Cancel –Ω–∏–∂–µ.",
        reply_markup=make_cancel_inline("task", "/task")
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º)
@bot.message_handler(func=lambda message: str(message.from_user.id) in user_states)
def datetime_input_handler(message):
    user_id = str(message.from_user.id)
    chat_id = message.chat.id
    datetime_str = message.text.strip()

    try:
        task_datetime = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
    except ValueError:
        example = generate_example_datetime()
        bot.send_message(
            chat_id,
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä:\n"
            f"{example}",
            reply_markup=make_cancel_inline("task", "/task")
        )
        return

    text = user_states[user_id]
    data = load_data()
    if user_id not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start")
        return

    new_task = {
        "text": text,
        "datetime": task_datetime.isoformat(),
        "status": "waiting",
        "reminded": False, 
        "created_at": now_msk().isoformat()
    }
    data[user_id]["tasks"].append(new_task)
    save_data(data)

    del user_states[user_id]
    bot.send_message(
        chat_id,
        f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"{text}\n"
        f"üìÖ {task_datetime.strftime('%d.%m.%Y –≤ %H:%M')}"
    )
    
def check_and_send_reminders(bot, user_id, chat_id, data):
    # print("started")
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""
    now = now_msk()
    tasks_to_remind = []

    for task in data[user_id]["tasks"]:
        
        if task.get("status") != "waiting" or task.get("reminded", True):
            # print("skipped")
            continue

        try:
            task_time = datetime.fromisoformat(task["datetime"])
            # print((task_time - now))
        except:
            continue

        # –£—Å–ª–æ–≤–∏–µ 1: –∑–∞–¥–∞—á–∞ –∑–∞–≤—Ç—Ä–∞ ‚Üí –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 13:00
        if (task_time.date() == (now.date() + timedelta(days=1))) and now.hour == 13:
            tasks_to_remind.append(task)

        # –£—Å–ª–æ–≤–∏–µ 2: –æ—Å—Ç–∞–ª–æ—Å—å ‚â§12 —á–∞—Å–æ–≤ ‚Üí –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Å—Ä–∞–∑—É
        elif (task_time - now).total_seconds() <= 12 * 3600:
            tasks_to_remind.append(task)

    if not tasks_to_remind:
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    lines = []
    for task in tasks_to_remind:
        dt_str = datetime.fromisoformat(task["datetime"]).strftime('%d.%m.%Y –≤ %H:%M')
        lines.append(f"üîî {task['text']}\nüìÖ {dt_str}")
        task["reminded"] = True  # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–∞–ø–æ–º–Ω–µ–Ω–Ω—É—é

    save_data(data)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    send_long_message(bot, chat_id, "\n\n".join(lines))
    
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
# –†–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏. –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ VPS –∏–ª–∏ Render
def reminder_daemon():
    while True:
        try:
            data = load_data()
            for user_id, user_data in data.items():
                # if "chat_id" in user_data:  # ‚Üê –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å chat_id!
                check_and_send_reminders(bot, user_id, user_id, data)
        except Exception as e:
            print(f"Reminder error: {e}")
        # time.sleep(600)  # 10 –º–∏–Ω—É—Ç

"""@bot.message_handler(commands=["clear"])
def clear_keyboard(message):
    bot.send_message(
        message.chat.id,
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ üéõÔ∏è –±—É–¥–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.",
        reply_markup=telebot.types.ReplyKeyboardRemove()
    )"""

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    reminder_thread = threading.Thread(target=reminder_daemon, daemon=True)
    reminder_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot.polling()
