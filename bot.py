from io import BytesIO
from datetime import datetime, timedelta
from flask import Flask, request # –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK –î–õ–Ø RENDER
import threading
import logging
import telebot
import requests
import json
import time
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
WEBHOOK_URL = "https://tg-bot-daily-planner.onrender.com"
TELEGRAM_BOT_TOKEN = "8396602686:AAFfOqaDehOGf7Y3iom_j6VNxEGEmyOxIgU"
TIMEZONE_OFFSET = 3  # UTC+3 (–ú–æ—Å–∫–≤–∞)
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
ADMIN_USER_ID = ["1287372767"] #–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

# –†–∞–±–æ—Ç–∞ —Å –≥–∏—Å—Ç–æ–º —Å –≥–∏—Ç—Ö–∞–±–∞ (–ø–µ—Ä–µ–Ω–æ—Å–∏–º –ë–î —Ç—É–¥–∞)
GIST_ID = os.getenv("GIST_ID")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

# WEB-HOOK
app = Flask(__name__)

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_awaiting_json_file = set()
user_awaiting_task_text = {}
user_awaiting_datetime = {}

CANCEL_ACTION_NAMES = {
    "cancel_task": "/task",
    "cancel_jsonin": "/jsonin",
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö callback_data-–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
CANCEL_ACTIONS = set(CANCEL_ACTION_NAMES.keys())

# –¢–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DB_ERROR_MESSAGE = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞!"

def now_msk():
    return datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)

# === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò –û–¢–ú–ï–ù–´ ===
def make_cancel_button(callback_data: str = "cancel_task") -> telebot.types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π 'Cancel'."""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("Cancel", callback_data=callback_data))
    return markup

# === –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò ===
def load_data(user_name: str, user_id: int, cmd: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ Gist. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if not GIST_ID or not GITHUB_TOKEN:
        logger.error("GIST_ID –∏–ª–∏ GITHUB_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return None

    url = f"https://api.github.com/gists/{GIST_ID}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        if resp.status_code == 200:
            gist_data = resp.json()
            for filename, file_info in gist_data["files"].items():
                if filename == "data.json":
                    content = file_info["content"]
                    if not content.strip():
                        return {}
                    try:
                        return json.loads(content)
                    except json.JSONDecodeError as e:
                        notify_admins_about_db_error(user_name, user_id, cmd, f"JSON decode error in Gist: {e}")
                        return None
            # –§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω
            notify_admins_about_db_error(user_name, user_id, cmd, "–§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Gist")
            return None
        else:

            notify_admins_about_db_error(user_name, user_id, cmd, f"GitHub API error: {resp.status_code} {resp.text}")
            return None
    except requests.RequestException as e:
        notify_admins_about_db_error(user_name, user_id, cmd, f"Network error loading Gist: {e}")
        return None
    except Exception as e:
        notify_admins_about_db_error(user_name, user_id, cmd, f"Unexpected error in load_data: {e}")
        return None

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π Gist."""
    if not GIST_ID or not GITHUB_TOKEN:
        logger.error("‚ùåGIST_ID –∏–ª–∏ GITHUB_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    url = f"https://api.github.com/gists/{GIST_ID}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    payload = {
        "files": {
            "data.json": {
                "content": json.dumps(data, ensure_ascii=False, indent=2)
            }
        }
    }
    try:
        resp = requests.patch(url, json=payload, headers=headers, timeout=10)
        if resp.status_code != 200:
            logger.error(f"‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Gist: {resp.status_code} {resp.text}")
    except Exception as e:
        logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Gist: {e}")
        
"""def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    temp_file = DATA_FILE + ".tmp"
    with open(temp_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(temp_file, DATA_FILE)"""

# === –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê ===
def notify_admins_about_db_error(user_name: str, user_id: str, command: str, error_details: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ë–î."""
    message_to_admins = (
        f"‚ÄºÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID={user_id}) –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /{command}, "
        f"–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–∞–∑–æ–π –î–∞–Ω–Ω—ã—Ö!\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ:\n{error_details}"
    )
    logger.error(error_details)
    for admin_id in ADMIN_USER_ID:
        try:
            if user_name != "" and user_id != 0 and command != "":
                bot.send_message(admin_id, message_to_admins)
                bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–∞–∑–æ–π –î–∞–Ω–Ω—ã—Ö! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@bot.message_handler(commands=["jsonout"])
def jsonout_handler(message):
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if str(message.from_user.id) not in ADMIN_USER_ID:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        data = load_data(user_name, message.from_user.id, "jsonout")
        if not data:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
            return
        elif is_data_empty(data):
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
            return

        json_bytes = json.dumps(data, ensure_ascii=False, indent=2).encode("utf-8")
        bot.send_document(
            message.chat.id,
            document=BytesIO(json_bytes),
            visible_file_name="data.json",
            caption="üìÅ –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        )

    except json.JSONDecodeError as e:
        error_details = f"–û—à–∏–±–∫–∞ –≤ JSON (—Å—Ç—Ä–æ–∫–∞ {e.lineno}, –∫–æ–ª–æ–Ω–∫–∞ {e.colno}): {e.msg}"
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –∏–∑ Gist: {error_details}")
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞: —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n```\n{error_details}\n```",
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /jsonout: {e}")
        bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –ø–æ —Å–º—ã—Å–ª—É (json —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, –Ω–æ –±–µ–∑ –∑–∞–¥–∞—á)
def is_data_empty(data: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ data —Ö–æ—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É —É –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not data:
        return True
    for user_data in data.values():
        if isinstance(user_data, dict) and user_data.get("tasks"):
            # –ï—Å–ª–∏ —É –∫–æ–≥–æ-—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –ø—É—Å—Ç–æ
            return False
    return True

@bot.message_handler(commands=["jsonin"])
def jsonin_handler(message):
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if str(message.from_user.id) not in ADMIN_USER_ID:
        try:
            bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except Exception as e:
            logger.error(f"‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return

    main_msg = "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–æ—Ç–∞."

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ë–î –∏–∑ Gist
    try:
        data = load_data(message.from_user.name, message.from_user.id, "jsonin")
        if not data:
            bot.send_message(
                message.chat.id,
                main_msg + "\n‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.",
                reply_markup=make_cancel_button("cancel_jsonin")
            )
        elif is_data_empty(data):
            bot.send_message(
                message.chat.id,
                main_msg + "\n‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.",
                reply_markup=make_cancel_button("cancel_jsonin")
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ë–î –∫–∞–∫ —Ñ–∞–π–ª
            json_bytes = json.dumps(data, ensure_ascii=False, indent=2).encode("utf-8")
            bot.send_document(
                message.chat.id,
                document=BytesIO(json_bytes),
                visible_file_name="data.json",
                caption=main_msg + "\nüìÅ –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=make_cancel_button("cancel_jsonin")
            )
    except Exception as e:
        logger.error(f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î –≤ /jsonin: {e}")
        bot.send_message(
            message.chat.id,
            main_msg + "\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=make_cancel_button("cancel_jsonin")
        )

    # –í–∞–∂–Ω–æ: –≤—Å–µ–≥–¥–∞ –≤—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    user_awaiting_json_file.add(str(message.from_user.id))

@bot.message_handler(content_types=["document"], func=lambda msg: str(msg.from_user.id) in user_awaiting_json_file)
def handle_json_file(msg):
    user_id = str(msg.from_user.id)
    chat_id = msg.chat.id
    if not msg.document:
        bot.send_message(chat_id, "‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª.", reply_markup=make_cancel_button("cancel_jsonin"))
        return
    file_info = bot.get_file(msg.document.file_id)
    file_name = msg.document.file_name or ""
    if not file_name.lower().endswith(".json"):
        bot.send_message(chat_id, "‚ö†Ô∏è–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json.", reply_markup=make_cancel_button("cancel_jsonin"))
        return
    try:
        downloaded_file = bot.download_file(file_info.file_path)
        json_content = json.loads(downloaded_file.decode("utf-8"))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª –ø–æ —Å–º—ã—Å–ª—É?
        if is_data_empty(json_content):
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî –≤–∞–ª–∏–¥–Ω—ã–π JSON, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.\n"
                "–§–∞–π–ª –Ω–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω—ë–Ω.",
                reply_markup=make_cancel_button("cancel_jsonin")
            )
            return
        save_data(json_content)
        user_awaiting_json_file.discard(user_id)
        bot.send_message(chat_id, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω—ë–Ω!")
    except json.JSONDecodeError as e:
        error_details = f"‚ùå–û—à–∏–±–∫–∞ –≤ JSON (—Å—Ç—Ä–æ–∫–∞ {e.lineno}, –∫–æ–ª–æ–Ω–∫–∞ {e.colno}): {e.msg}"
        logger.error(f"‚ùåJSON decode error from user {msg.from_user.id}: {error_details}")
        bot.send_message(
            chat_id,
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-—Ñ–∞–π–ª.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n{error_details}",
            reply_markup=make_cancel_button("cancel_jsonin")
        )
    except UnicodeDecodeError as e:
        logger.error(f"Unicode decode error from user {msg.from_user.id}: {e}")
        bot.send_message(chat_id, "‚ùå–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.", reply_markup=make_cancel_button("cancel_jsonin"))
    except Exception as e:
        logger.error(f"Unexpected error in handle_json_file: {e}", exc_info=True)
        bot.send_message(chat_id, f"‚ùå–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=make_cancel_button("cancel_jsonin"))
        
@bot.callback_query_handler(func=lambda call: call.data in CANCEL_ACTIONS)
def universal_cancel_handler(call):
    user_id = str(call.from_user.id)
    action = call.data
    command_name = CANCEL_ACTION_NAMES[action]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
    in_mode = False
    if action == "cancel_task":
        in_mode = (user_id in user_awaiting_task_text) or (user_id in user_awaiting_datetime)
    elif action == "cancel_jsonin":
        in_mode = user_id in user_awaiting_json_file

    if in_mode:
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞
        if action == "cancel_task":
            user_awaiting_task_text.pop(user_id, None)
            user_awaiting_datetime.pop(user_id, None)
        elif action == "cancel_jsonin":
            user_awaiting_json_file.discard(user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ!)
        bot.send_message(call.message.chat.id, f"‚ùå –†–µ–∂–∏–º –≤–≤–æ–¥–∞ {command_name} –æ—Ç–º–µ–Ω—ë–Ω.")
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏")
        bot.answer_callback_query(call.id)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.answer_callback_query(
            call.id,
            f"–†–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã {command_name} —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!",
            show_alert=False  # –º–æ–∂–Ω–æ True, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        )

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def send_long_message(bot, chat_id, text):
    if not text.strip():
        return
    max_len = 4000
    for i in range(0, len(text), max_len):
        bot.send_message(chat_id, text[i:i + max_len])

def generate_example_datetime():
    now = now_msk()
    tomorrow = now.date() + timedelta(days=1)
    example_dt = datetime.combine(tomorrow, datetime.min.time()).replace(
        hour=now.hour, minute=now.minute
    )
    return example_dt.strftime("%Y-%m-%d %H:%M")

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
@bot.message_handler(commands=["info"])
def info_handler(message):
    user_id = str(message.from_user.id)
    is_admin = (user_id in ADMIN_USER_ID)

    text = "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ¬´–ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫¬ª</b>\n"
    text += "<b>–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤, –¥–ª—è –Ω–∏—Ö - —Å–≤–æ–∏ –¥–æ–ø.-–∫–æ–º–∞–Ω–¥—ã):</b>\n"
    text += "<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∞–¥–º–∏–Ω–∞–º</i>\n\n"
    text += "‚Ä¢ /start ‚Äî <i>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</i>\n"
    text += "‚Ä¢ /info ‚Äî <i>–ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É</i>\n"
    text += "‚Ä¢ /task ‚Äî <i>–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</i>\n"
    text += "‚Ä¢ <i>–ó–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</i>\n"
    text += "  ‚Äì <i>–∑–∞ –¥–µ–Ω—å –≤ 13:00 –ø–æ –ú–°–ö,</i>\n"
    text += "  ‚Äì <i>–∏–ª–∏ –∑–∞ 12 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞.</i>\n\n"

    if is_admin:
        text += "<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        text += "‚Ä¢ /jsonout ‚Äî <i>–ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—éa –ë–î –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞</i>\n"
        text += "‚Ä¢ /jsonin ‚Äî <i>–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –ë–î –∏–∑ —Ñ–∞–π–ª–∞</i>\n"
        text += "<i>‚ö†Ô∏è –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î —Ç—Ä–µ–±—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON-—Ñ–æ—Ä–º–∞—Ç–∞.</i>\n"

    bot.send_message(message.chat.id, text, parse_mode="HTML")

@bot.message_handler(commands=["start"])
def start_handler(message):
    user_id = str(message.from_user.id)
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    for attempt in range(3):  # –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        # 1. –ß–∏—Ç–∞–µ–º –°–í–ï–ñ–£–Æ –ë–î –∏–∑ Gist
        data = load_data(user_name, message.from_user.id, "start")

        # bot.send_message(message.chat.id, "üîç –¢–µ–∫—É—â–∞—è –ë–î:\n" + json.dumps(data, ensure_ascii=False, indent=2))

        # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if user_id in data:
            bot.send_message(message.chat.id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! –ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å.")
            return

        # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data[user_id] = {
            "user_name": user_name,
            "chat_id": str(message.chat.id),
            "tasks": []
        }

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–Æ –ë–î (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        save_data(data)

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        data_check = load_data(user_name, message.from_user.id, "start")
        if user_id in data_check:
            bot.send_message(
                message.chat.id,
                f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n"
                "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ –≤ Telegram.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                "/task ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
            )
            return

        # –ï—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª)
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –ë–î")

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
    bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

@bot.message_handler(commands=["task"])
def task_handler(message):
    user_id = str(message.from_user.id)
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data = load_data(user_name, message.from_user.id, "task")
    text = message.text[6:].strip()
    if not text:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ, –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã):",
            reply_markup=make_cancel_button("cancel_task")
        )
        user_awaiting_task_text[user_id] = True
    else:
        user_awaiting_datetime[user_id] = text
        example = (now_msk() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
        bot.send_message(
            message.chat.id,
            f"–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä:\n{example}\n"
            f"–ò–ª–∏ –Ω–∞–∂–º–∏ Cancel –Ω–∏–∂–µ.",
            reply_markup=make_cancel_button("cancel_task")
        )

@bot.message_handler(func=lambda msg: str(msg.from_user.id) in user_awaiting_task_text)
def task_text_input(msg):
    user_id = str(msg.from_user.id)
    user_name = msg.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data = load_data(user_name, user_id, "task")
    user_id = str(msg.from_user.id)
    text = msg.text.strip()
    if not text:
        bot.send_message(msg.chat.id, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    user_awaiting_datetime[user_id] = text
    del user_awaiting_task_text[user_id]
    example = (now_msk() + timedelta(days=1)).strftime("%Y-%m-%d %H:%M")
    bot.send_message(
        msg.chat.id,
        f"–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
        f"–ü—Ä–∏–º–µ—Ä:\n{example}\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏ inline-–∫–Ω–æ–ø–∫—É Cancel –Ω–∏–∂–µ.",
        reply_markup=make_cancel_button("cancel_task")
    )

@bot.message_handler(func=lambda message: str(message.from_user.id) in user_awaiting_datetime)
def datetime_input_handler(message):
    user_id = str(message.from_user.id)
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data = load_data(user_name, user_id, "task")
    chat_id = message.chat.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    datetime_str = message.text.strip()
    try:
        task_datetime = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
    except ValueError:
        example = generate_example_datetime()
        bot.send_message(
            chat_id,
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä:\n{example}",
            reply_markup=make_cancel_button("cancel_task")
        )
        return
    text = user_awaiting_datetime[user_id]
    data = load_data(user_name, message.from_user.id, "task")
    if user_id not in data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start")
        return
    new_task = {
        "text": text,
        "datetime": task_datetime.isoformat(),
        "status": "waiting",
        "reminded": False,
        "created_at": now_msk().isoformat()
    }
    data[user_id]["tasks"].append(new_task)
    save_data(data)
    del user_awaiting_datetime[user_id]
    bot.send_message(
        chat_id,
        f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"{text}\n"
        f"üìÖ {task_datetime.strftime('%d.%m.%Y –≤ %H:%M')}"
    )

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
def check_and_send_reminders(bot, user_id, chat_id, data):
    now = now_msk()
    tasks_to_remind = []
    for task in data[user_id]["tasks"]:
        if task.get("status") != "waiting" or task.get("reminded", True):
            continue
        try:
            task_time = datetime.fromisoformat(task["datetime"])
        except:
            continue
        if (task_time.date() == (now.date() + timedelta(days=1))) and now.hour == 13:
            tasks_to_remind.append(task)
        elif (task_time - now).total_seconds() <= 12 * 3600 and task.get("status") != "overdue":
            tasks_to_remind.append(task)
    if not tasks_to_remind:
        return
    lines = []
    for task in tasks_to_remind:
        dt_str = datetime.fromisoformat(task["datetime"]).strftime('%d.%m.%Y –≤ %H:%M')
        lines.append(f"üîî {task['text']}\nüìÖ {dt_str}")
        task["reminded"] = True
    save_data(data)
    send_long_message(bot, chat_id, "\n\n".join(lines).strip())

def reminder_daemon():
    while True:
        try:
            data = load_data("", 0, "")
            for user_id, user_data in data.items():
                check_and_send_reminders(bot, user_id, user_id, data)
        except Exception as e:
            print(f"Reminder error: {e}")
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

@app.route('/' + TELEGRAM_BOT_TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        return 'Invalid content type', 403

@app.route('/')
def index():
    return 'Bot is running.'

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    reminder_thread = threading.Thread(target=reminder_daemon, daemon=True)
    reminder_thread.start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL + '/' + TELEGRAM_BOT_TOKEN)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 5000))
    app.run(host="0.0.0.0", port=port)
